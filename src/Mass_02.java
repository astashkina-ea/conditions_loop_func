public class Mass_02 {
    public static void main(String[] args) {

        //массив - структура данных, упорядочный набор эл-ов (одного типа)
        //индекс массива начинаетя с 0
        //
        //1 способ создания массива - создать пустой массив
        int[] mass1 = new int[10]; //int mass1 [] - так не рекомендуется создавать, но можно
        //заполнение массива
        mass1[0] = 12;
        mass1[1] = 3;
        mass1[3] = 55;
        //обращение к эл-ту массива - если обратиться к эл-ту которого не существует (напрмер к 10) то будет ошибка тк вышли за пределы массива
        System.out.println(mass1[3]);

        //2 способ создания массива - создать и сразу заполнить
        int[] mass2 = {1, 2, -5, 7}; // или int[] mass2 = new int[] {1, 2, -5, 7};
        System.out.println(mass2[2]);

        //как изменить переделать массив
        int[] mass4 = {12, 62, -85, 97};
        System.out.println(mass4[0]);
        mass4 = new int[]{3, 2, 5}; //изменение
        System.out.println(mass4[0]);

        //как изменить конст массив - никак.
        //только можно поменять значение элемента конст массива
        final int[] mass5 = {12, 62, -85, 97};
        System.out.println(mass5[0]);
        //mass4 = new int[]{3, 2, 5}; //будет ошибка
        mass5[0] = 22; //можно поменять только конкретный элемент
        System.out.println(mass5[0]);

        //длина массива
        System.out.println(mass5.length);
        //последний элемент массива
        System.out.println(mass5[mass5.length - 10]);

        //создание многомерного массивов
        int[][] numbers = new int[5][9]; //5 строчек и 9 колонок
        int[][] numbers1 = new int[][]{ { 0, 1, 2 }, { 3, 4, 5 } }; //2 строчки и 3 колонки
        int[][] numbers2 = { { 0, 1, 2 }, { 3, 4, 5 } };
        //заполнение многомерного массива
        numbers[0][0]= 3;
        numbers[1][0]= 5;
        numbers[2][0]= 18;
        numbers[3][0]= 77;
        numbers[2][4]= 42;
        /*
        Преимущества:
        - быстрая скорость доступа к элементу
        - Оптимальное хранение примитивов
        Недостатки:
        - Фиксированная длина. Длина массива объявляется при инициализации и не может быть изменена после этого.
        - Массивы используют int в качестве индекса. Ни один массив не может содержать более 2^31 - 1 элементов
        - Невозможно создать неизменяемый массив
        */
    }
}